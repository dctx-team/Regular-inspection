"""
Á≠æÂà∞Ê†∏ÂøÉÈÄªËæëÊ®°Âùó
Êï¥Âêà AnyRouter Âíå AgentRouter ÁöÑÁ≠æÂà∞ÂäüËÉΩ
"""

import asyncio
import hashlib
import json
import os
from datetime import datetime
from typing import Dict, List, Optional

import httpx
from playwright.async_api import async_playwright

from config import parse_cookies


BALANCE_HASH_FILE = 'balance_hash.txt'
BALANCE_DATA_FILE = 'balance_data.json'


class RouterCheckin:
    """RouterÂπ≥Âè∞Á≠æÂà∞Á±ª"""

    def __init__(self):
        self.last_balance_hash = self._load_balance_hash()
        self.last_balance_data = self._load_balance_data()
        self.current_balances = {}
        self.balance_changed = False

    async def run_all(self, anyrouter_accounts: List[Dict], agentrouter_accounts: List[Dict]) -> List[Dict]:
        """ÊâßË°åÊâÄÊúâË¥¶Âè∑ÁöÑÁ≠æÂà∞"""
        results = []

        # Â§ÑÁêÜ AnyRouter Ë¥¶Âè∑
        anyrouter_results = []
        for i, account in enumerate(anyrouter_accounts):
            result = await self.checkin_anyrouter(account, i)
            results.append(result)
            anyrouter_results.append(result)
            await asyncio.sleep(2)  # ÈÅøÂÖçËØ∑Ê±ÇËøáÂø´

        # ÊòæÁ§∫ AnyRouter Âπ≥Âè∞Ê±áÊÄª
        if anyrouter_results:
            self._print_platform_summary('AnyRouter', anyrouter_results)

        # Â§ÑÁêÜ AgentRouter Ë¥¶Âè∑
        agentrouter_results = []
        for i, account in enumerate(agentrouter_accounts):
            result = await self.checkin_agentrouter(account, i)
            results.append(result)
            agentrouter_results.append(result)
            await asyncio.sleep(2)

        # ÊòæÁ§∫ AgentRouter Âπ≥Âè∞Ê±áÊÄª
        if agentrouter_results:
            self._print_platform_summary('AgentRouter', agentrouter_results)

        # Ê£ÄÊü•‰ΩôÈ¢ùÂèòÂåñ
        self._check_balance_change()

        return results

    def _print_platform_summary(self, platform_name: str, platform_results: List[Dict]):
        """ÊâìÂç∞Âçï‰∏™Âπ≥Âè∞ÁöÑÊ±áÊÄªÁªüËÆ°"""
        success_count = sum(1 for r in platform_results if r['success'])
        failed_count = len(platform_results) - success_count

        total_quota = 0
        total_used = 0
        has_balance = False

        for result in platform_results:
            if result.get('balance'):
                has_balance = True
                balance = result['balance']
                total_quota += balance['quota']
                total_used += balance['used']

        print()
        print('‚îÄ' * 60)
        print(f'üìä {platform_name} Âπ≥Âè∞Ê±áÊÄª')
        print('‚îÄ' * 60)
        print(f'Ë¥¶Âè∑Êï∞Èáè: {len(platform_results)} ‰∏™')
        print(f'ÊàêÂäü: {success_count} ‰∏™ | Â§±Ë¥•: {failed_count} ‰∏™')

        if has_balance:
            print(f'ÊÄª‰ΩôÈ¢ù: ${total_quota:.2f}')
            print(f'ÊÄªÂ∑≤Áî®: ${total_used:.2f}')

        print('‚îÄ' * 60)

    async def checkin_anyrouter(self, account: Dict, index: int) -> Dict:
        """AnyRouter Á≠æÂà∞"""
        platform = 'AnyRouter'
        account_name = account.get('name', f'AnyRouterË¥¶Âè∑{index+1}')

        print(f'\n[PROCESSING] Ê≠£Âú®Â§ÑÁêÜ [{platform}] {account_name}')

        try:
            # Ëß£ÊûêÈÖçÁΩÆ
            cookies_data = account.get('cookies', {})
            api_user = account.get('api_user', '')

            if not api_user:
                return self._make_result(platform, account_name, False, 'API User ID Êú™ÈÖçÁΩÆ')

            user_cookies = parse_cookies(cookies_data)
            if not user_cookies:
                return self._make_result(platform, account_name, False, 'Cookies Ê†ºÂºèÈîôËØØ')

            # Ëé∑Âèñ WAF cookies
            print(f'[STEP 1] Ëé∑Âèñ WAF cookies...')
            waf_cookies = await self._get_waf_cookies(account_name, 'https://anyrouter.top/login')

            if not waf_cookies:
                return self._make_result(platform, account_name, False, 'Êó†Ê≥ïËé∑Âèñ WAF cookies')

            # ÂêàÂπ∂ cookies
            all_cookies = {**waf_cookies, **user_cookies}

            # ÊûÑÂª∫ËØ∑Ê±Ç
            print(f'[STEP 2] ÊâßË°åÁ≠æÂà∞ËØ∑Ê±Ç...')
            success, message, balance = await self._do_anyrouter_checkin(
                account_name, all_cookies, api_user
            )

            # ËÆ∞ÂΩï‰ΩôÈ¢ù
            balance_change = None
            account_key = f'anyrouter_{account_name}'

            if balance:
                # Á≠æÂà∞ÊàêÂäüÔºåÊõ¥Êñ∞‰ΩôÈ¢ù
                self.current_balances[account_key] = balance
                # ÊòæÁ§∫‰ΩôÈ¢ùÂèòÂåñÂπ∂Ëé∑ÂèñÂèòÂä®‰ø°ÊÅØ
                balance_change = self._show_balance_change(account_key, balance)
            else:
                # Á≠æÂà∞Â§±Ë¥•Ôºå‰øùÁïôÊóß‰ΩôÈ¢ùÊï∞ÊçÆÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
                if account_key in self.last_balance_data:
                    self.current_balances[account_key] = self.last_balance_data[account_key]
                    print(f'[WARN] Á≠æÂà∞Â§±Ë¥•Ôºå‰øùÁïô‰∏äÊ¨°‰ΩôÈ¢ùÊï∞ÊçÆÔºàÊú™Êõ¥Êñ∞Ôºâ')
                    # ‰ΩøÁî®Êóß‰ΩôÈ¢ù‰Ωú‰∏∫ÂΩìÂâç‰ΩôÈ¢ù
                    balance = self.last_balance_data[account_key]

            return self._make_result(platform, account_name, success, message, balance, balance_change)

        except Exception as e:
            error_msg = f'Á≠æÂà∞ÂºÇÂ∏∏: {str(e)[:50]}'
            print(f'[ERROR] {error_msg}')

            # ÂºÇÂ∏∏ÊÉÖÂÜµ‰πü‰øùÁïôÊóß‰ΩôÈ¢ùÊï∞ÊçÆ
            account_key = f'anyrouter_{account_name}'
            balance = None
            if account_key in self.last_balance_data:
                self.current_balances[account_key] = self.last_balance_data[account_key]
                balance = self.last_balance_data[account_key]
                print(f'[WARN] ÂèëÁîüÂºÇÂ∏∏Ôºå‰øùÁïô‰∏äÊ¨°‰ΩôÈ¢ùÊï∞ÊçÆÔºàÊú™Êõ¥Êñ∞Ôºâ')

            return self._make_result(platform, account_name, False, error_msg, balance)

    async def checkin_agentrouter(self, account: Dict, index: int) -> Dict:
        """AgentRouter Á≠æÂà∞"""
        platform = 'AgentRouter'
        account_name = account.get('name', f'AgentRouterË¥¶Âè∑{index+1}')

        print(f'\n[PROCESSING] Ê≠£Âú®Â§ÑÁêÜ [{platform}] {account_name}')

        try:
            # Ëß£ÊûêÈÖçÁΩÆ
            cookies_data = account.get('cookies', {})
            api_user = account.get('api_user', '')

            if not api_user:
                return self._make_result(platform, account_name, False, 'API User ID Êú™ÈÖçÁΩÆ')

            user_cookies = parse_cookies(cookies_data)
            if not user_cookies:
                return self._make_result(platform, account_name, False, 'Cookies Ê†ºÂºèÈîôËØØ')

            # Â∞ùËØïËé∑Âèñ WAF cookiesÔºàÂ∞ùËØïÂ§ö‰∏™ URLÔºâ
            print(f'[STEP 1] Ëé∑Âèñ WAF cookies...')
            waf_cookies = await self._get_waf_cookies_with_fallback(
                account_name,
                ['https://agentrouter.org', 'https://agentrouter.org/console']
            )

            # ÂêàÂπ∂ cookiesÔºàÂç≥‰ΩøÊ≤°Êúâ WAF cookies ‰πüÁªßÁª≠Ôºâ
            all_cookies = {**waf_cookies, **user_cookies} if waf_cookies else user_cookies

            # ÊâßË°åÁ≠æÂà∞ËØ∑Ê±Ç
            print(f'[STEP 2] ÊâßË°åÁ≠æÂà∞ËØ∑Ê±Ç...')
            success, message, balance = await self._do_agentrouter_checkin(
                account_name, all_cookies, api_user
            )

            # ËÆ∞ÂΩï‰ΩôÈ¢ù
            balance_change = None
            account_key = f'agentrouter_{account_name}'

            if balance:
                # Á≠æÂà∞ÊàêÂäüÔºåÊõ¥Êñ∞‰ΩôÈ¢ù
                self.current_balances[account_key] = balance
                # ÊòæÁ§∫‰ΩôÈ¢ùÂèòÂåñÂπ∂Ëé∑ÂèñÂèòÂä®‰ø°ÊÅØ
                balance_change = self._show_balance_change(account_key, balance)
            else:
                # Á≠æÂà∞Â§±Ë¥•Ôºå‰øùÁïôÊóß‰ΩôÈ¢ùÊï∞ÊçÆÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
                if account_key in self.last_balance_data:
                    self.current_balances[account_key] = self.last_balance_data[account_key]
                    print(f'[WARN] Á≠æÂà∞Â§±Ë¥•Ôºå‰øùÁïô‰∏äÊ¨°‰ΩôÈ¢ùÊï∞ÊçÆÔºàÊú™Êõ¥Êñ∞Ôºâ')
                    # ‰ΩøÁî®Êóß‰ΩôÈ¢ù‰Ωú‰∏∫ÂΩìÂâç‰ΩôÈ¢ù
                    balance = self.last_balance_data[account_key]

            return self._make_result(platform, account_name, success, message, balance, balance_change)

        except Exception as e:
            error_msg = f'Á≠æÂà∞ÂºÇÂ∏∏: {str(e)[:50]}'
            print(f'[ERROR] {error_msg}')

            # ÂºÇÂ∏∏ÊÉÖÂÜµ‰πü‰øùÁïôÊóß‰ΩôÈ¢ùÊï∞ÊçÆ
            account_key = f'agentrouter_{account_name}'
            balance = None
            if account_key in self.last_balance_data:
                self.current_balances[account_key] = self.last_balance_data[account_key]
                balance = self.last_balance_data[account_key]
                print(f'[WARN] ÂèëÁîüÂºÇÂ∏∏Ôºå‰øùÁïô‰∏äÊ¨°‰ΩôÈ¢ùÊï∞ÊçÆÔºàÊú™Êõ¥Êñ∞Ôºâ')

            return self._make_result(platform, account_name, False, error_msg, balance)

    async def _get_waf_cookies_with_fallback(self, account_name: str, urls: List[str]) -> Optional[Dict[str, str]]:
        """Â∞ùËØïÂ§ö‰∏™ URL Ëé∑Âèñ WAF cookies"""
        for url in urls:
            print(f'[INFO] Â∞ùËØï URL: {url}')
            cookies = await self._get_waf_cookies(account_name, url, timeout=20000)
            if cookies:
                return cookies

        print(f'[WARN] ÊâÄÊúâ URL ÂùáÊú™Ëé∑ÂèñÂà∞ WAF cookiesÔºåÂ∞ÜÂè™‰ΩøÁî®Áî®Êà∑ cookies')
        return None

    async def _get_waf_cookies(self, account_name: str, url: str, timeout: int = 30000) -> Optional[Dict[str, str]]:
        """‰ΩøÁî® Playwright Ëé∑Âèñ WAF cookies"""
        async with async_playwright() as p:
            import tempfile
            with tempfile.TemporaryDirectory() as temp_dir:
                context = await p.chromium.launch_persistent_context(
                    user_data_dir=temp_dir,
                    headless=True,
                    user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
                    viewport={'width': 1920, 'height': 1080},
                    args=[
                        '--disable-blink-features=AutomationControlled',
                        '--disable-dev-shm-usage',
                        '--disable-web-security',
                        '--no-sandbox',
                    ],
                )

                page = await context.new_page()

                try:
                    print(f'[INFO] ËÆøÈóÆÈ°µÈù¢Ëé∑Âèñ cookies...')
                    await page.goto(url, wait_until='domcontentloaded', timeout=timeout)

                    try:
                        await page.wait_for_function('document.readyState === "complete"', timeout=3000)
                    except Exception:
                        await page.wait_for_timeout(2000)

                    cookies = await page.context.cookies()

                    waf_cookies = {}
                    for cookie in cookies:
                        cookie_name = cookie.get('name')
                        cookie_value = cookie.get('value')
                        if cookie_name in ['acw_tc', 'cdn_sec_tc', 'acw_sc__v2'] and cookie_value:
                            waf_cookies[cookie_name] = cookie_value

                    print(f'[SUCCESS] Ëé∑ÂèñÂà∞ {len(waf_cookies)} ‰∏™ WAF cookies')

                    await context.close()
                    return waf_cookies if waf_cookies else None

                except Exception as e:
                    print(f'[ERROR] Ëé∑Âèñ WAF cookies Â§±Ë¥•: {e}')
                    await context.close()
                    return None


    async def _do_anyrouter_checkin(self, account_name: str, cookies: Dict, api_user: str) -> tuple:
        """ÊâßË°å AnyRouter Á≠æÂà∞ËØ∑Ê±Ç"""
        client = httpx.AsyncClient(http2=True, timeout=30.0)

        try:
            client.cookies.update(cookies)

            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json, text/plain, */*',
                'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',
                'Referer': 'https://anyrouter.top/console',
                'Origin': 'https://anyrouter.top',
                'new-api-user': api_user,
            }

            # Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØ
            balance = None
            try:
                print(f'[INFO] Â∞ùËØïËé∑ÂèñÁî®Êà∑‰ø°ÊÅØ...')
                user_response = await client.get('https://anyrouter.top/api/user/self', headers=headers)
                print(f'[DEBUG] Áî®Êà∑‰ø°ÊÅØÂìçÂ∫î: HTTP {user_response.status_code}')

                if user_response.status_code == 200:
                    user_data = user_response.json()
                    if user_data.get('success'):
                        data = user_data.get('data', {})
                        quota = round(data.get('quota', 0) / 500000, 2)
                        used = round(data.get('used_quota', 0) / 500000, 2)
                        balance = {'quota': quota, 'used': used}
                        print(f'[INFO] ÂΩìÂâç‰ΩôÈ¢ù: ${quota}, Â∑≤Áî®: ${used}')
                    else:
                        print(f'[WARN] APIËøîÂõûÂ§±Ë¥•: {user_data.get("message", "Êú™Áü•ÈîôËØØ")}')
                elif user_response.status_code == 401:
                    print(f'[ERROR] ‚ö†Ô∏è  ËÆ§ËØÅÂ§±Ë¥• - Session Cookie Â∑≤ËøáÊúüÔºÅ')
                    print(f'[ERROR] ËØ∑ÈáçÊñ∞ÁôªÂΩï https://anyrouter.top/register?aff=hgT6 Ëé∑ÂèñÊñ∞ÁöÑ session cookie')
                    print(f'[ERROR] Âπ∂Êõ¥Êñ∞ GitHub Secrets ‰∏≠ÁöÑ ANYROUTER_ACCOUNTS ÈÖçÁΩÆ')
                    try:
                        error_data = user_response.json()
                        print(f'[ERROR] ÈîôËØØ‰ø°ÊÅØ: {error_data.get("message", "Êú™Áü•ÈîôËØØ")}')
                    except:
                        pass
                else:
                    print(f'[WARN] Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÂ§±Ë¥•: HTTP {user_response.status_code}')
            except Exception as e:
                print(f'[ERROR] Ëé∑Âèñ‰ΩôÈ¢ùÂºÇÂ∏∏: {e}')

            # ÊâßË°åÁ≠æÂà∞
            checkin_headers = headers.copy()
            checkin_headers.update({
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            })

            response = await client.post(
                'https://anyrouter.top/api/user/sign_in',
                headers=checkin_headers
            )

            print(f'[RESPONSE] HTTP {response.status_code}')

            if response.status_code == 200:
                try:
                    result = response.json()
                    if result.get('ret') == 1 or result.get('code') == 0 or result.get('success'):
                        return True, 'Á≠æÂà∞ÊàêÂäü', balance
                    else:
                        msg = result.get('msg', result.get('message', 'Êú™Áü•ÈîôËØØ'))
                        return False, f'Á≠æÂà∞Â§±Ë¥•: {msg}', balance
                except Exception:
                    if 'success' in response.text.lower():
                        return True, 'Á≠æÂà∞ÊàêÂäü', balance
                    return False, 'Á≠æÂà∞Â§±Ë¥•: ÂìçÂ∫îÊ†ºÂºèÈîôËØØ', balance
            else:
                return False, f'Á≠æÂà∞Â§±Ë¥•: HTTP {response.status_code}', balance

        except Exception as e:
            return False, f'ËØ∑Ê±ÇÂºÇÂ∏∏: {str(e)[:50]}', None
        finally:
            await client.aclose()

    async def _do_agentrouter_checkin(self, account_name: str, cookies: Dict, api_user: str) -> tuple:
        """ÊâßË°å AgentRouter Á≠æÂà∞ËØ∑Ê±Ç"""
        # AgentRouter ÂèØËÉΩ‰ΩøÁî®Á±ª‰ººÁöÑAPIÔºåËøôÈáåÈúÄË¶ÅÊ†πÊçÆÂÆûÈôÖÊÉÖÂÜµË∞ÉÊï¥
        client = httpx.AsyncClient(http2=True, timeout=30.0)

        try:
            client.cookies.update(cookies)

            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json, text/plain, */*',
                'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',
                'Referer': 'https://agentrouter.org/console',
                'Origin': 'https://agentrouter.org',
                'new-api-user': api_user,
            }

            # Â∞ùËØïËé∑ÂèñÁî®Êà∑‰ø°ÊÅØÔºàÊµãËØïÁôªÂΩïÁä∂ÊÄÅÔºâ
            balance = None
            try:
                print(f'[INFO] Â∞ùËØïËé∑ÂèñÁî®Êà∑‰ø°ÊÅØ...')
                user_response = await client.get('https://agentrouter.org/api/user/self', headers=headers)
                print(f'[DEBUG] Áî®Êà∑‰ø°ÊÅØÂìçÂ∫î: HTTP {user_response.status_code}')

                if user_response.status_code == 200:
                    user_data = user_response.json()
                    # ‰∏çÊòæÁ§∫ÂÆåÊï¥ÂìçÂ∫îÊï∞ÊçÆÔºåÈÅøÂÖçÊ≥ÑÈú≤ÊïèÊÑü‰ø°ÊÅØ

                    if user_data.get('success'):
                        data = user_data.get('data', {})
                        quota = round(data.get('quota', 0) / 500000, 2)
                        used = round(data.get('used_quota', 0) / 500000, 2)
                        balance = {'quota': quota, 'used': used}
                        print(f'[INFO] ÂΩìÂâç‰ΩôÈ¢ù: ${quota}, Â∑≤Áî®: ${used}')
                    else:
                        print(f'[WARN] APIËøîÂõûÂ§±Ë¥•: {user_data.get("message", "Êú™Áü•ÈîôËØØ")}')
                elif user_response.status_code == 401:
                    print(f'[ERROR] ‚ö†Ô∏è  ËÆ§ËØÅÂ§±Ë¥• - Session Cookie Â∑≤ËøáÊúüÔºÅ')
                    print(f'[ERROR] ËØ∑ÈáçÊñ∞ÁôªÂΩï https://agentrouter.org/register?aff=7Stf Ëé∑ÂèñÊñ∞ÁöÑ session cookie')
                    print(f'[ERROR] Âπ∂Êõ¥Êñ∞ GitHub Secrets ‰∏≠ÁöÑ AGENTROUTER_ACCOUNTS ÈÖçÁΩÆ')
                    try:
                        error_data = user_response.json()
                        print(f'[ERROR] ÈîôËØØ‰ø°ÊÅØ: {error_data.get("message", "Êú™Áü•ÈîôËØØ")}')
                    except:
                        pass
                else:
                    print(f'[WARN] Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÂ§±Ë¥•: HTTP {user_response.status_code}')
                    try:
                        print(f'[DEBUG] ÈîôËØØÂìçÂ∫î: {user_response.text[:200]}')
                    except:
                        pass
            except Exception as e:
                print(f'[ERROR] Ëé∑Âèñ‰ΩôÈ¢ùÂºÇÂ∏∏: {e}')

            # Â∞ùËØïÁ≠æÂà∞ÔºàÂ¶ÇÊûúÊúâÁ≠æÂà∞Êé•Âè£Ôºâ
            checkin_headers = headers.copy()
            checkin_headers.update({
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            })

            try:
                response = await client.post(
                    'https://agentrouter.org/api/user/sign_in',
                    headers=checkin_headers
                )

                print(f'[RESPONSE] HTTP {response.status_code}')

                if response.status_code == 200:
                    result = response.json()
                    if result.get('ret') == 1 or result.get('code') == 0 or result.get('success'):
                        return True, 'Á≠æÂà∞ÊàêÂäü', balance
                    else:
                        msg = result.get('msg', result.get('message', 'Êú™Áü•ÈîôËØØ'))
                        return False, f'Á≠æÂà∞Â§±Ë¥•: {msg}', balance
                elif response.status_code == 404:
                    # Â¶ÇÊûúÊ≤°ÊúâÁ≠æÂà∞Êé•Âè£ÔºåÂè™Ë¶ÅËÉΩËé∑ÂèñÁî®Êà∑‰ø°ÊÅØÂ∞±ÁÆóÊàêÂäü
                    if balance:
                        return True, 'Á≠æÂà∞ÊàêÂäü', balance
                    return False, 'Á≠æÂà∞Â§±Ë¥•: Êó†Ê≥ïËé∑ÂèñÁî®Êà∑‰ø°ÊÅØ', None
                else:
                    return False, f'Á≠æÂà∞Â§±Ë¥•: HTTP {response.status_code}', balance

            except httpx.HTTPStatusError as e:
                if e.response.status_code == 404 and balance:
                    # Â¶ÇÊûúÁ≠æÂà∞Êé•Âè£‰∏çÂ≠òÂú®‰ΩÜËÉΩËé∑Âèñ‰ΩôÈ¢ùÔºåÁÆó‰ΩúÁ≠æÂà∞ÊàêÂäü
                    return True, 'Á≠æÂà∞ÊàêÂäü', balance
                return False, f'ËØ∑Ê±ÇÂ§±Ë¥•: {e}', balance

        except Exception as e:
            return False, f'ËØ∑Ê±ÇÂºÇÂ∏∏: {str(e)[:50]}', None
        finally:
            await client.aclose()

    def _make_result(self, platform: str, name: str, success: bool,
                     message: str, balance: Optional[Dict] = None,
                     balance_change: Optional[Dict] = None) -> Dict:
        """ÊûÑÂª∫ÁªìÊûúÂØπË±°"""
        result = {
            'platform': platform,
            'name': name,
            'success': success,
            'message': message,
            'timestamp': datetime.now().isoformat()
        }
        if balance:
            result['balance'] = balance
        if balance_change:
            result['balance_change'] = balance_change
        return result

    def _load_balance_hash(self) -> Optional[str]:
        """Âä†ËΩΩ‰ΩôÈ¢ùÂìàÂ∏å"""
        try:
            if os.path.exists(BALANCE_HASH_FILE):
                with open(BALANCE_HASH_FILE, 'r') as f:
                    return f.read().strip()
        except Exception:
            pass
        return None

    def _load_balance_data(self) -> Dict:
        """Âä†ËΩΩ‰∏äÊ¨°ÁöÑ‰ΩôÈ¢ùÊï∞ÊçÆ"""
        try:
            if os.path.exists(BALANCE_DATA_FILE):
                with open(BALANCE_DATA_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception:
            pass
        return {}

    def _save_balance_data(self):
        """‰øùÂ≠òÂΩìÂâç‰ΩôÈ¢ùÊï∞ÊçÆ"""
        try:
            with open(BALANCE_DATA_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.current_balances, f, ensure_ascii=False, indent=2)
            print(f'[INFO] ‰ΩôÈ¢ùÊï∞ÊçÆÂ∑≤‰øùÂ≠òÂà∞ {BALANCE_DATA_FILE}')
            print(f'[INFO] ‰øùÂ≠ò‰∫Ü {len(self.current_balances)} ‰∏™Ë¥¶Âè∑ÁöÑ‰ΩôÈ¢ùÊï∞ÊçÆ')
        except Exception as e:
            print(f'[WARN] ‰øùÂ≠ò‰ΩôÈ¢ùÊï∞ÊçÆÂ§±Ë¥•: {e}')

    def _show_balance_change(self, account_key: str, current_balance: Dict) -> Optional[Dict]:
        """ÊòæÁ§∫‰ΩôÈ¢ùÂèòÂåñÂπ∂ËøîÂõûÂèòÂä®‰ø°ÊÅØ

        ÈÄªËæëËØ¥ÊòéÔºö
        - quota: ÂèØÁî®‰ΩôÈ¢ù
        - used: Â∑≤Áî®È¢ùÂ∫¶
        - Ë¥¶Êà∑ÊÄªÈ¢ùÂ∫¶ = quota + used

        ËøîÂõûÔºö
        - None: È¶ñÊ¨°ËÆ∞ÂΩïÊàñÊó†ÂèòÂåñ
        - Dict: ÂåÖÂê´ÂèòÂä®ËØ¶ÊÉÖ
        """
        if account_key not in self.last_balance_data:
            # È¶ñÊ¨°ËÆ∞ÂΩïÔºå‰∏çÊòæÁ§∫ÂèòÂåñ
            return None

        last_balance = self.last_balance_data[account_key]
        last_quota = last_balance.get('quota', 0)  # ‰∏äÊ¨°ÂèØÁî®‰ΩôÈ¢ù
        last_used = last_balance.get('used', 0)    # ‰∏äÊ¨°Â∑≤Áî®
        current_quota = current_balance['quota']    # ÂΩìÂâçÂèØÁî®‰ΩôÈ¢ù
        current_used = current_balance['used']      # ÂΩìÂâçÂ∑≤Áî®

        # ËÆ°ÁÆóÊÄªÈ¢ùÂ∫¶ÂèòÂåñ
        last_total = last_quota + last_used      # ‰∏äÊ¨°ÊÄªÈ¢ùÂ∫¶
        current_total = current_quota + current_used  # ÂΩìÂâçÊÄªÈ¢ùÂ∫¶
        total_recharge = current_total - last_total   # Êñ∞Â¢ûÂä†ÈáëÈ¢ù

        # ËÆ°ÁÆó‰ΩøÁî®ÂèòÂåñ
        used_change = current_used - last_used

        # ËÆ°ÁÆóÂèØÁî®‰ΩôÈ¢ùÂèòÂåñ
        quota_change = current_quota - last_quota

        # ÊûÑÂª∫ÂèòÂä®‰ø°ÊÅØ
        change_info = None

        if total_recharge != 0 or used_change != 0:
            print(f'[CHANGE] ‰ΩôÈ¢ùÂèòÊõ¥:')

            change_info = {
                'recharge': total_recharge,
                'used_change': used_change,
                'quota_change': quota_change,
                'last_quota': last_quota,
                'last_used': last_used,
                'current_quota': current_quota,
                'current_used': current_used
            }

            # ÊòæÁ§∫Â¢ûÂä†
            if total_recharge > 0:
                print(f'  üí≥ Êú¨ÊúüÂ¢ûÂä†: +${total_recharge:.2f} (ÊÄªÈ¢ùÂ∫¶: ${last_total:.2f} ‚Üí ${current_total:.2f})')
            elif total_recharge < 0:
                print(f'  ‚ö†Ô∏è  ÊÄªÈ¢ùÂ∫¶ÂáèÂ∞ë: ${total_recharge:.2f} (${last_total:.2f} ‚Üí ${current_total:.2f})')

            # ÊòæÁ§∫‰ΩøÁî®
            if used_change > 0:
                print(f'  üìä Êú¨Êúü‰ΩøÁî®: +${used_change:.2f} (Â∑≤Áî®: ${last_used:.2f} ‚Üí ${current_used:.2f})')
            elif used_change < 0:
                print(f'  üîÑ Â∑≤Áî®ÂáèÂ∞ë: ${used_change:.2f} (${last_used:.2f} ‚Üí ${current_used:.2f})')

            # ÊòæÁ§∫ÂèØÁî®‰ΩôÈ¢ùÂèòÂåñÔºàÂáÄÊïàÊûúÔºâ
            if quota_change > 0:
                print(f'  üí∞ ÂèØÁî®‰ΩôÈ¢ùÂ¢ûÂä†: +${quota_change:.2f} (${last_quota:.2f} ‚Üí ${current_quota:.2f})')
            elif quota_change < 0:
                print(f'  üí∞ ÂèØÁî®‰ΩôÈ¢ùÂáèÂ∞ë: ${quota_change:.2f} (${last_quota:.2f} ‚Üí ${current_quota:.2f})')
            else:
                print(f'  ‚ÑπÔ∏è  ÂèØÁî®‰ΩôÈ¢ù‰∏çÂèò: ${current_quota:.2f}')

        return change_info

    def _save_balance_hash(self, balance_hash: str):
        """‰øùÂ≠ò‰ΩôÈ¢ùÂìàÂ∏å"""
        try:
            with open(BALANCE_HASH_FILE, 'w') as f:
                f.write(balance_hash)
            print(f'[INFO] ‰ΩôÈ¢ùÂìàÂ∏åÂ∑≤‰øùÂ≠òÂà∞ {BALANCE_HASH_FILE}: {balance_hash}')
        except Exception as e:
            print(f'[WARN] ‰øùÂ≠ò‰ΩôÈ¢ùÂìàÂ∏åÂ§±Ë¥•: {e}')

    def _generate_balance_hash(self, balances: Dict) -> str:
        """ÁîüÊàê‰ΩôÈ¢ùÂìàÂ∏å"""
        simple_balances = {k: v['quota'] for k, v in balances.items()}
        balance_json = json.dumps(simple_balances, sort_keys=True)
        return hashlib.sha256(balance_json.encode()).hexdigest()[:16]

    def _check_balance_change(self):
        """Ê£ÄÊü•‰ΩôÈ¢ùÊòØÂê¶ÂèòÂåñ"""
        if not self.current_balances:
            return

        current_hash = self._generate_balance_hash(self.current_balances)

        # Âà§Êñ≠ÊòØÂê¶È¶ñÊ¨°ËøêË°å
        is_first_run = (self.last_balance_hash is None and not self.last_balance_data)

        if is_first_run:
            # ÁúüÊ≠£ÁöÑÈ¶ñÊ¨°ËøêË°åÔºàÊó¢Ê≤°Êúâ hash ‰πüÊ≤°Êúâ‰ΩôÈ¢ùÊï∞ÊçÆÔºâ
            self.balance_changed = True
            print('[INFO] È¶ñÊ¨°ËøêË°åÔºåËÆ∞ÂΩïÂΩìÂâç‰ΩôÈ¢ù')
        elif self.last_balance_hash is None:
            # Êúâ‰ΩôÈ¢ùÊï∞ÊçÆ‰ΩÜÊ≤°Êúâ hashÔºàÂèØËÉΩÊòØÊóßÁâàÊú¨ÂçáÁ∫ßÔºâ
            self.balance_changed = True
            print('[INFO] ÈáçÊñ∞ÁîüÊàê‰ΩôÈ¢ùÂìàÂ∏å')
        elif current_hash != self.last_balance_hash:
            # ‰ΩôÈ¢ùÂèòÂåñ
            self.balance_changed = True
            print('[INFO] Ê£ÄÊµãÂà∞‰ΩôÈ¢ùÂèòÂåñ')
        else:
            # ‰ΩôÈ¢ùÊó†ÂèòÂåñ
            self.balance_changed = False
            print('[INFO] ‰ΩôÈ¢ùÊó†ÂèòÂåñ')

        # ‰øùÂ≠òÊñ∞ÁöÑÂìàÂ∏åÂíå‰ΩôÈ¢ùÊï∞ÊçÆ
        self._save_balance_hash(current_hash)
        self._save_balance_data()

    def has_balance_changed(self) -> bool:
        """‰ΩôÈ¢ùÊòØÂê¶ÂèòÂåñ"""
        return self.balance_changed
